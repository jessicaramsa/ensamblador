//Suma ADD
debug
a
mov al,3
mov bl,5
add al,bl
mov dh,4
mov ch,3
add dh,ch
add bl,dh
add al,[200]
add [200],al
add 3,4
add [200],[201]
add 4,al

-------------------------------------------

//Resta SUB
debug
a
mov al,3
mov bl,5
sub al,bl
mov dh,4
mov ch,3
sub dh,ch
sub bl,dh
sub al,[200]
sub [200],al
sub 3,4
sub [200],[201]
sub 4,al

---------------------------------------------
//Suma con Acarreo ADC
debug
a
stc	;enciende la bandera de carry
mov al,3
adc al,2
adc al,bl

---------------------------------------------
//Resta con Acarreo SBB
debug
a
stc
mov al,6
sbb al,2

---------------------------------------------
	MULTIPLICACION

debug
a
mov al, 4
mov cl,5
mul cl
aam	;AJUSTE ASCCI DE MULTIPLICACION

debug
a
mov al,38
mov cl,32
mul cl
aam

//Multiplicar 7436*3
debug
eds: 200 "7436"
eds: 210 "3"
eds: 220 "00000"
a
mov cl,4
mov dh,00
mov si,203
mov dl,210
mov bx,224
mov al,[si]
and al,0f
mov dl,[di]
and dl,0f
mul dl
aam
add al,dh
aaa
mov [bx],al
mov dh,ah
dec si
dec bx
loop 10d	;SALTO 1
mov [bx],ah
mov cl,5
mov si,220
mov ah.02
mov dl,[si]	;AQUI VA EL SALTO 2
or dl,30
int 21
inc si
loop 232	;SALTO 2

int 20

---------------------------------------------
//Incrementar INC
debug
a
inc al
inc dh
inc ah
inc cx

---------------------------------------------
//Decremento DEC
debug
a
dec al
dec dh
dec ah
dec cx

---------------------------------------------
		OPERACIONES LOGICAS
---------------------------------------------
	AND

debug
a
mov al,ae
mov bl,7b
and al, bl
and al,0f

----------------------------------------------
	OR
debug
a
mov al,ae
mov bl,7b
or al, bl
or dx,96
or bh,al

-----------------------------------------------
	XOR (diferentes = 1)
debug
a
mov al,ae
mov bl,7b
xor al,bl
xor dx,96
xor bh,al

------------------------------------------------
	NOT //Se necesitan 2 operandos
debug
a
not cx
not ah

-------------------------------------------------
	COMPLEMENTO A 2 (NEG)
debug
a
neg cx

--------------------------------------------------
Hacer la resta 9-6

sin usar:
sub
neg
sbb
y solo usar una vez la suma

debug
a
mov al,9
mov bl,6

-------------------------------------------------------

-----------NEMONICOS HEGEMONICOS-----------------------

----------------CORRIMIENTOS---------------------------

	Hacia la Derecha

debug
a
mov al,b6
shr al,1 ;el 1 es para marcar cuantas veces se corre
mov cl,2
shr al,cl
shl al,1 ;Corrimiento a la izquierda
shl al,cl
ror al,1 ;Rotacion a la derecha
ror al,cl
rol al,1 ;Rotacion a la izquierda
rol al,cl
stc ;encender banderas
rcr al, cl ;Rotacion con CARRY hacia la derecha
stc
rcl al,1 ;Rotacion con CARRY hacia la izquierda

---------------------------------------------------------
-----------------COMPARAR--------------------------------
	Comparar (CMP)

comparar si es igual:
	jne -> es diferente
	je -> es igual

debug
a
mov al,6
mov cl,3
dec al
cmp al,cl ;comparar
jne 104 ;salta a la ip 104 si no eres igual
je 100 ; si es igual se posiciona en la direccion ip 100

------------------------------------------------------------

-------------- LOOP ----------------------------------------

	Contiene decremento, comparar y saltar
debug
a
mov cl,3
inc al
loop 102

------------------------------------------------------------

Imprimir caracters a la pantalla

INTERRUPCIONES

//p: procede a ejecutar la interrupcion

debug
a
mov ah,02
mov dl,35
int 21

--------------------------------------------------------------

IMPRIMIR NOMBRE

debug
eds:200 "Cristofer Tostado"
a
mov cl,d
mov si,200
mov ah,02
mov dl,[si]	;AQUI VA EL SALTO 1
int 21
inc si
dec cl
cmp cl,0
jne 107		;SALTO 1
int 20 ;fin del programa

g ;corre todo el programa

------------------------------------------------------------------
debug
eds: 200 "abcdefghijklmnopqrstuvwxyz"
a
mov cl,1a
mov si, 200
mov ah,02
mov dl,[si] ;IP 107
int 21 ;poner la letra p para imprimir el cararcter
dec cl
inc si
cmp cl,0
jne 107 ;salto 1
int 20

-------------------------------------------------------------------
	Imprimir codigo ASCII

debug
a
mov cl,1a
mov bl,61
mov ah,02
mov dl,bl ; aqui es el salto
int 21
mov dl,20
int 21
inc bl
dec cl
cmp cl,0
jne 106 ; salto
int 20

-------------------------------------------------------------------
IMPRIMIR NOMBRE EN EL CENTRO DE LA PANTALLA

debug
eds:200 "Cristofer Tostado"
a
mov cl,c ;c= 12 lineas de salto
mov ah,02
mov dl,0d ; retorno de carro salto 1
int 21
mov dl,0a; cambio de linea
int 21
dec cl
cmp cl,0
jne 104 ;salto 1
mov cl,21 
mov dl,20
int 21 ; salto 2
dec cl
cmp cl,0
jne 117 ; salto 2
mov cl,11
mov si,200
mov ah,02
mov dl,[si] ;salto 3
int 21
inc si
dec cl
cmp cl,0
jne 127 ;salto 3
int 20 ;fin del programa

----------------------------------------------------------

	AAA	(Ajuste a ASCII de la adiciòn o suma)

//El valor para modificarse debe estar en el reguistro al
//Y regeresa el codigo en BCD Descompactado
	SUMA DE DOS NUMEROS

debug
eds: 200 "242"
eds: 210 "424"
eds: 220 "0000"
a
mov si,202
mov di,212
mov bx,223
mov al,[si]
mov dl,[di]
and al,0f ;cero F
and dl,0f
add al,dh
add al,dl
aaa ;ajuste
mov [bx],al
mov dh,ah
mov ah,0 ;limpiar la parte alta Resultado del primer opreando
dec si
dec di
dec bx
mov al,[si]
mov dl,[di]
and al,0f ;cero F
and dl,0f
add al,dh
adc al,dl
aaa ;ajuste
mov [bx],al
mov dh,ah
mov ah,0 ;limpiar la parte alta Resultado del segundo opreando
dec si
dec di
dec bx
mov al,[si]
mov dl,[di]
and al,0f ;cero F
and dl,0f
add al,dh
adc al,dl
aaa ;ajuste
mov [bx],al
mov ah,0 ;limpiar la parte alta Resultado del tercer opreando
dec bx
mov [bx],ah
mov cl,4 ;Imprimir Datos
mov ah,02
mov si,220
mov dl,[si]	; AQUI VA EL SALTO 1
or dl,30
int 21
inc si
dec cl
cmp cl,0
jne 153		;SALTO 1
int 20

--------------------------------------------------------------------

	PRIMERA SIMPLIFICACION DE LA SUMA

debug
eds: 200 "999"
eds: 210 "999"
eds: 220 "0000"
a
mov cl,3
mov si,202
mov di,212
mov bx,223
mov al,[si]	;AQUI VA EL SALTO 1
mov dl,[di]
and al,0f ;cero F
and dl,0f
add al,dh
add al,dl
mov ah,0 	;Resultado del primer opreando
aaa 		;ajuste
mov [bx],al
mov dh,ah
dec si
dec di
dec bx
dec cl
cmp cl,0
jne 10b		;SALTO 1
mov [bx],ah
mov cl,4 	;Imprimir Datos
mov ah,02
mov si,220
mov dl,[si]	; AQUI VA EL SALTO 2
or dl,30
int 21
inc si
dec cl
cmp cl,0
jne 132		;SALTO 2
int 20

-----------------------------------------------------------

	SIMPLIFACION DE SUMA NUMERO 3


debug
eds: 200 "999"
eds: 210 "999"
eds: 220 "0000"
eds: 230 "Primer Operando:  " 
eds: 250 "Segundo Operando:  " 
eds: 270 "Resultado:  " 
a
mov cl,12	;PRIMER MENSAJE
mov si,230
mov ah,02
mov dl,[si]		;AQUI VA EL SALTO 3
int 21		;IMPRIME EL DATO
inc si
loop 107 		;SALTO 3
mov cl,3	;IMPRIMIR EL PRIMER DATO
mov si,200
mov dl,[si]		;AQUI VA EL SALTO 4
int 21
inc si
loop 113		;SALTO 4
mov dl,0a
int 21
mov dl,0d
int 21
mov cl,13	;SEGUNDO MENSAJE
mov si,250
mov dl,[si]		;AQUI VA EL SALTO 5
int 21
inc si
loop 127		;SALTO 5
mov cl,3
mov si,210
mov dl,[si]		;AQUI VA EL SALTO 6
int 21
inc si
loop 133		;salto 6
mov cl,3	;INICIO DE SUMA
mov si,202
mov di,212
mov bx,223
mov al,[si]	;AQUI VA EL SALTO 1
mov dl,[di]
adc al,dl
mov ah,0 	;Resultado del primer opreando
aaa 		;ajuste de suma
mov [bx],al
dec si
dec di
dec bx
loop 145		;SALTO 1
mov [bx],ah
mov dl,0a
mov ah,02	;CAMBIO DE LINEA Y RETORNO DE CARRO
int 21
mov dl,0d
int 21
mov cl,c	;IMPRIMIR TERCER MENSAJE RESULTADO
mov si,270
mov dl,[si]		;AQUI VA EL SALTO 7
int 21
inc si
loop 166		;SALTO 7
mov cl,4 	;Imprimir resultado de la suma
mov ah,02
mov si,220
mov dl,[si]	; AQUI VA EL SALTO 2
or dl,30
int 21
inc si
loop 174		;SALTO 2
mov ah,0
int 16
int 20

-------------------------------------------------------------

	RESTAR DOS NUMEROS


debug
eds: 200 "777"
eds: 210 "999"
eds: 220 "0000"
a
mov cl,3
mov si,202
mov di,212
mov bx,223
mov al,[si]	;AQUI VA EL SALTO 1
mov dl,[di]
sbb al,dl
mov ah,0 	;Resultado del primer opreando
aas 		;ajuste de resta
mov [bx],al
dec si
dec di
dec bx
loop 10b		;SALTO 1
mov [bx],ah
mov cl,4 	;Imprimir Datos
mov ah,02
mov si,220
mov dl,[si]	; AQUI VA EL SALTO 2
or dl,30
int 21
inc si
loop 124		;SALTO 2
int 20

--------------------------------------------------------------

	SALTO INCONDICIONAL

debug
a
jmp 120

eds: 102 "Tostado"
a 108
mov cl,7
--------------------------------------------------------------

debug
a
jmp 109

eds: 102 "Tostado"
a 109
mov cl,7
mov ah,02
mov si,102
mov dl,[si]	;AQUI VA EL SALTO 1
int 21
inc si
loop 110	;SALTO 1
int 20

n c:\jmp.com
rcx
108
r
w
q
cls
jmp

------------------------------------------------------------
	COMPARACION
debug
a
mov cl,3
cmp cl,8
jb 120		;SI ERES MENOR

---------------------------------
mov cl,3
cmp cl,2
jb 120		;SI ERES MAYOR